//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Documents\Studium\Cdelta\Stages\Grammar\CdeltaParser.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Cdelta.Analyser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class CdeltaParser : Parser {
	public const int
		AUTOMATON=1, STATE=2, TRANSITION=3, START=4, END=5, ENTRY=6, EXIT=7, CONDITION=8, 
		SEMICOLON=9, CURLY_OPEN=10, CURLY_CLOSE=11, LESS_THAN=12, GREATER_THAN=13, 
		PUBLIC=14, INTERNAL=15, PROTECTED=16, PRIVATE=17, WHITESPACES=18, IDENTIFIER=19, 
		SINGLE_LINE_COMMENT=20, DELIMITED_COMMENT=21;
	public const int
		RULE_codeFile = 0, RULE_preAutomatonCode = 1, RULE_postAutomatonCode = 2, 
		RULE_automatonDefinition = 3, RULE_accessModifier = 4, RULE_automatonDataType = 5, 
		RULE_automatonBody = 6, RULE_stateDefinition = 7, RULE_stateInnerBlock = 8, 
		RULE_stateEntry = 9, RULE_stateExit = 10, RULE_transitionDefinition = 11, 
		RULE_transitionInnerBlock = 12, RULE_transitionCondition = 13, RULE_transitionEntry = 14, 
		RULE_undefined = 15;
	public static readonly string[] ruleNames = {
		"codeFile", "preAutomatonCode", "postAutomatonCode", "automatonDefinition", 
		"accessModifier", "automatonDataType", "automatonBody", "stateDefinition", 
		"stateInnerBlock", "stateEntry", "stateExit", "transitionDefinition", 
		"transitionInnerBlock", "transitionCondition", "transitionEntry", "undefined"
	};

	private static readonly string[] _LiteralNames = {
		null, "'automaton'", "'state'", "'transition'", "'start'", "'end'", "'entry'", 
		"'exit'", "'condition'", "';'", "'{'", "'}'", "'<'", "'>'", "'public'", 
		"'internal'", "'protected'", "'private'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AUTOMATON", "STATE", "TRANSITION", "START", "END", "ENTRY", "EXIT", 
		"CONDITION", "SEMICOLON", "CURLY_OPEN", "CURLY_CLOSE", "LESS_THAN", "GREATER_THAN", 
		"PUBLIC", "INTERNAL", "PROTECTED", "PRIVATE", "WHITESPACES", "IDENTIFIER", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CdeltaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CdeltaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeFileContext : ParserRuleContext {
		public PreAutomatonCodeContext preAutomatonCode() {
			return GetRuleContext<PreAutomatonCodeContext>(0);
		}
		public AutomatonDefinitionContext automatonDefinition() {
			return GetRuleContext<AutomatonDefinitionContext>(0);
		}
		public PostAutomatonCodeContext postAutomatonCode() {
			return GetRuleContext<PostAutomatonCodeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CdeltaParser.Eof, 0); }
		public CodeFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterCodeFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitCodeFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeFileContext codeFile() {
		CodeFileContext _localctx = new CodeFileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_codeFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; preAutomatonCode();
			State = 33; automatonDefinition();
			State = 34; postAutomatonCode();
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreAutomatonCodeContext : ParserRuleContext {
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public PreAutomatonCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preAutomatonCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterPreAutomatonCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitPreAutomatonCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreAutomatonCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreAutomatonCodeContext preAutomatonCode() {
		PreAutomatonCodeContext _localctx = new PreAutomatonCodeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_preAutomatonCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; undefined();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostAutomatonCodeContext : ParserRuleContext {
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public PostAutomatonCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postAutomatonCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterPostAutomatonCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitPostAutomatonCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostAutomatonCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostAutomatonCodeContext postAutomatonCode() {
		PostAutomatonCodeContext _localctx = new PostAutomatonCodeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_postAutomatonCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; undefined();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutomatonDefinitionContext : ParserRuleContext {
		public ITerminalNode AUTOMATON() { return GetToken(CdeltaParser.AUTOMATON, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CdeltaParser.IDENTIFIER, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public AutomatonBodyContext automatonBody() {
			return GetRuleContext<AutomatonBodyContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ITerminalNode LESS_THAN() { return GetToken(CdeltaParser.LESS_THAN, 0); }
		public AutomatonDataTypeContext automatonDataType() {
			return GetRuleContext<AutomatonDataTypeContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(CdeltaParser.GREATER_THAN, 0); }
		public AutomatonDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_automatonDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterAutomatonDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitAutomatonDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutomatonDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AutomatonDefinitionContext automatonDefinition() {
		AutomatonDefinitionContext _localctx = new AutomatonDefinitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_automatonDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << INTERNAL) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) {
				{
				State = 41; accessModifier();
				}
			}

			State = 44; Match(AUTOMATON);
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LESS_THAN) {
				{
				State = 45; Match(LESS_THAN);
				State = 46; automatonDataType();
				State = 47; Match(GREATER_THAN);
				}
			}

			State = 51; Match(IDENTIFIER);
			State = 52; Match(CURLY_OPEN);
			State = 53; automatonBody();
			State = 54; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CdeltaParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CdeltaParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CdeltaParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CdeltaParser.PUBLIC, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_accessModifier);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(PROTECTED);
				State = 57; Match(INTERNAL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(PRIVATE);
				State = 59; Match(PROTECTED);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; Match(PUBLIC);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61; Match(INTERNAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62; Match(PROTECTED);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63; Match(PRIVATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutomatonDataTypeContext : ParserRuleContext {
		public ITerminalNode[] GREATER_THAN() { return GetTokens(CdeltaParser.GREATER_THAN); }
		public ITerminalNode GREATER_THAN(int i) {
			return GetToken(CdeltaParser.GREATER_THAN, i);
		}
		public AutomatonDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_automatonDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterAutomatonDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitAutomatonDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutomatonDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AutomatonDataTypeContext automatonDataType() {
		AutomatonDataTypeContext _localctx = new AutomatonDataTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_automatonDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 66;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==GREATER_THAN) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOMATON) | (1L << STATE) | (1L << TRANSITION) | (1L << START) | (1L << END) | (1L << ENTRY) | (1L << EXIT) | (1L << CONDITION) | (1L << SEMICOLON) | (1L << CURLY_OPEN) | (1L << CURLY_CLOSE) | (1L << LESS_THAN) | (1L << PUBLIC) | (1L << INTERNAL) | (1L << PROTECTED) | (1L << PRIVATE) | (1L << WHITESPACES) | (1L << IDENTIFIER) | (1L << SINGLE_LINE_COMMENT) | (1L << DELIMITED_COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutomatonBodyContext : ParserRuleContext {
		public StateDefinitionContext[] stateDefinition() {
			return GetRuleContexts<StateDefinitionContext>();
		}
		public StateDefinitionContext stateDefinition(int i) {
			return GetRuleContext<StateDefinitionContext>(i);
		}
		public TransitionDefinitionContext[] transitionDefinition() {
			return GetRuleContexts<TransitionDefinitionContext>();
		}
		public TransitionDefinitionContext transitionDefinition(int i) {
			return GetRuleContext<TransitionDefinitionContext>(i);
		}
		public AutomatonBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_automatonBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterAutomatonBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitAutomatonBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutomatonBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AutomatonBodyContext automatonBody() {
		AutomatonBodyContext _localctx = new AutomatonBodyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_automatonBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STATE) | (1L << TRANSITION) | (1L << START) | (1L << END))) != 0)) {
				{
				State = 73;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case STATE:
				case START:
				case END:
					{
					State = 71; stateDefinition();
					}
					break;
				case TRANSITION:
					{
					State = 72; transitionDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateDefinitionContext : ParserRuleContext {
		public ITerminalNode STATE() { return GetToken(CdeltaParser.STATE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CdeltaParser.IDENTIFIER, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CdeltaParser.SEMICOLON, 0); }
		public ITerminalNode START() { return GetToken(CdeltaParser.START, 0); }
		public ITerminalNode END() { return GetToken(CdeltaParser.END, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public StateInnerBlockContext stateInnerBlock() {
			return GetRuleContext<StateInnerBlockContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public StateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterStateDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitStateDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateDefinitionContext stateDefinition() {
		StateDefinitionContext _localctx = new StateDefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stateDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==START) {
				{
				State = 78; Match(START);
				}
			}

			State = 82;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 81; Match(END);
				}
			}

			State = 84; Match(STATE);
			State = 85; Match(IDENTIFIER);
			State = 91;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SEMICOLON:
				{
				State = 86; Match(SEMICOLON);
				}
				break;
			case CURLY_OPEN:
				{
				{
				State = 87; Match(CURLY_OPEN);
				State = 88; stateInnerBlock();
				State = 89; Match(CURLY_CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateInnerBlockContext : ParserRuleContext {
		public StateEntryContext stateEntry() {
			return GetRuleContext<StateEntryContext>(0);
		}
		public StateExitContext stateExit() {
			return GetRuleContext<StateExitContext>(0);
		}
		public StateInnerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateInnerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterStateInnerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitStateInnerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateInnerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateInnerBlockContext stateInnerBlock() {
		StateInnerBlockContext _localctx = new StateInnerBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stateInnerBlock);
		int _la;
		try {
			State = 105;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ENTRY) {
					{
					State = 93; stateEntry();
					}
				}

				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EXIT) {
					{
					State = 96; stateExit();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EXIT) {
					{
					State = 99; stateExit();
					}
				}

				State = 103;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ENTRY) {
					{
					State = 102; stateEntry();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateEntryContext : ParserRuleContext {
		public ITerminalNode ENTRY() { return GetToken(CdeltaParser.ENTRY, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public StateEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterStateEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitStateEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateEntryContext stateEntry() {
		StateEntryContext _localctx = new StateEntryContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stateEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(ENTRY);
			State = 108; Match(CURLY_OPEN);
			State = 109; undefined();
			State = 110; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateExitContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(CdeltaParser.EXIT, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public StateExitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateExit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterStateExit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitStateExit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateExit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateExitContext stateExit() {
		StateExitContext _localctx = new StateExitContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stateExit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(EXIT);
			State = 113; Match(CURLY_OPEN);
			State = 114; undefined();
			State = 115; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionDefinitionContext : ParserRuleContext {
		public ITerminalNode TRANSITION() { return GetToken(CdeltaParser.TRANSITION, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CdeltaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CdeltaParser.IDENTIFIER, i);
		}
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public TransitionInnerBlockContext transitionInnerBlock() {
			return GetRuleContext<TransitionInnerBlockContext>(0);
		}
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public TransitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterTransitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitTransitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionDefinitionContext transitionDefinition() {
		TransitionDefinitionContext _localctx = new TransitionDefinitionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_transitionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(TRANSITION);
			State = 118; Match(IDENTIFIER);
			State = 119; Match(IDENTIFIER);
			State = 120; Match(CURLY_OPEN);
			State = 123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 121; transitionInnerBlock();
				}
				break;

			case 2:
				{
				State = 122; undefined();
				}
				break;
			}
			State = 125; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionInnerBlockContext : ParserRuleContext {
		public TransitionConditionContext transitionCondition() {
			return GetRuleContext<TransitionConditionContext>(0);
		}
		public TransitionEntryContext transitionEntry() {
			return GetRuleContext<TransitionEntryContext>(0);
		}
		public TransitionInnerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionInnerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterTransitionInnerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitTransitionInnerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitionInnerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionInnerBlockContext transitionInnerBlock() {
		TransitionInnerBlockContext _localctx = new TransitionInnerBlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_transitionInnerBlock);
		int _la;
		try {
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; transitionCondition();
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ENTRY) {
					{
					State = 128; transitionEntry();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ENTRY) {
					{
					State = 131; transitionEntry();
					}
				}

				State = 134; transitionCondition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionConditionContext : ParserRuleContext {
		public ITerminalNode CONDITION() { return GetToken(CdeltaParser.CONDITION, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public TransitionConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterTransitionCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitTransitionCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitionCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionConditionContext transitionCondition() {
		TransitionConditionContext _localctx = new TransitionConditionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_transitionCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(CONDITION);
			State = 138; Match(CURLY_OPEN);
			State = 139; undefined();
			State = 140; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionEntryContext : ParserRuleContext {
		public ITerminalNode ENTRY() { return GetToken(CdeltaParser.ENTRY, 0); }
		public ITerminalNode CURLY_OPEN() { return GetToken(CdeltaParser.CURLY_OPEN, 0); }
		public UndefinedContext undefined() {
			return GetRuleContext<UndefinedContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(CdeltaParser.CURLY_CLOSE, 0); }
		public TransitionEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterTransitionEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitTransitionEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitionEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionEntryContext transitionEntry() {
		TransitionEntryContext _localctx = new TransitionEntryContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_transitionEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(ENTRY);
			State = 143; Match(CURLY_OPEN);
			State = 144; undefined();
			State = 145; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedContext : ParserRuleContext {
		public UndefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.EnterUndefined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICdeltaParserListener typedListener = listener as ICdeltaParserListener;
			if (typedListener != null) typedListener.ExitUndefined(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICdeltaParserVisitor<TResult> typedVisitor = visitor as ICdeltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefinedContext undefined() {
		UndefinedContext _localctx = new UndefinedContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_undefined);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 147;
					MatchWildcard();
					}
					} 
				}
				State = 152;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17\x9C\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x5\x5\x5-\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x34\n\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x43\n\x6\x3\a\x6\a\x46\n\a\r\a\xE\aG\x3\b\x3\b\a\bL\n\b\f"+
		"\b\xE\bO\v\b\x3\t\x5\tR\n\t\x3\t\x5\tU\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x5\t^\n\t\x3\n\x5\n\x61\n\n\x3\n\x5\n\x64\n\n\x3\n\x5\ng\n\n\x3"+
		"\n\x5\nj\n\n\x5\nl\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r~\n\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE"+
		"\x84\n\xE\x3\xE\x5\xE\x87\n\xE\x3\xE\x5\xE\x8A\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\a\x11\x97\n\x11"+
		"\f\x11\xE\x11\x9A\v\x11\x3\x11\x3\x98\x2\x2\x12\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\x2\x3\x3\x2\xF\xF\xA2\x2\"\x3\x2\x2\x2\x4\'\x3\x2\x2\x2\x6)\x3"+
		"\x2\x2\x2\b,\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\f\x45\x3\x2\x2\x2\xEM\x3\x2"+
		"\x2\x2\x10Q\x3\x2\x2\x2\x12k\x3\x2\x2\x2\x14m\x3\x2\x2\x2\x16r\x3\x2\x2"+
		"\x2\x18w\x3\x2\x2\x2\x1A\x89\x3\x2\x2\x2\x1C\x8B\x3\x2\x2\x2\x1E\x90\x3"+
		"\x2\x2\x2 \x98\x3\x2\x2\x2\"#\x5\x4\x3\x2#$\x5\b\x5\x2$%\x5\x6\x4\x2%"+
		"&\a\x2\x2\x3&\x3\x3\x2\x2\x2\'(\x5 \x11\x2(\x5\x3\x2\x2\x2)*\x5 \x11\x2"+
		"*\a\x3\x2\x2\x2+-\x5\n\x6\x2,+\x3\x2\x2\x2,-\x3\x2\x2\x2-.\x3\x2\x2\x2"+
		".\x33\a\x3\x2\x2/\x30\a\xE\x2\x2\x30\x31\x5\f\a\x2\x31\x32\a\xF\x2\x2"+
		"\x32\x34\x3\x2\x2\x2\x33/\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x35\x3\x2"+
		"\x2\x2\x35\x36\a\x15\x2\x2\x36\x37\a\f\x2\x2\x37\x38\x5\xE\b\x2\x38\x39"+
		"\a\r\x2\x2\x39\t\x3\x2\x2\x2:;\a\x12\x2\x2;\x43\a\x11\x2\x2<=\a\x13\x2"+
		"\x2=\x43\a\x12\x2\x2>\x43\a\x10\x2\x2?\x43\a\x11\x2\x2@\x43\a\x12\x2\x2"+
		"\x41\x43\a\x13\x2\x2\x42:\x3\x2\x2\x2\x42<\x3\x2\x2\x2\x42>\x3\x2\x2\x2"+
		"\x42?\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43\v\x3\x2\x2"+
		"\x2\x44\x46\n\x2\x2\x2\x45\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x45\x3\x2"+
		"\x2\x2GH\x3\x2\x2\x2H\r\x3\x2\x2\x2IL\x5\x10\t\x2JL\x5\x18\r\x2KI\x3\x2"+
		"\x2\x2KJ\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\xF\x3"+
		"\x2\x2\x2OM\x3\x2\x2\x2PR\a\x6\x2\x2QP\x3\x2\x2\x2QR\x3\x2\x2\x2RT\x3"+
		"\x2\x2\x2SU\a\a\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2UV\x3\x2\x2\x2VW\a\x4"+
		"\x2\x2W]\a\x15\x2\x2X^\a\v\x2\x2YZ\a\f\x2\x2Z[\x5\x12\n\x2[\\\a\r\x2\x2"+
		"\\^\x3\x2\x2\x2]X\x3\x2\x2\x2]Y\x3\x2\x2\x2^\x11\x3\x2\x2\x2_\x61\x5\x14"+
		"\v\x2`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62\x64\x5\x16"+
		"\f\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64l\x3\x2\x2\x2\x65g\x5"+
		"\x16\f\x2\x66\x65\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2hj\x5\x14"+
		"\v\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2\x2k`\x3\x2\x2\x2k\x66\x3"+
		"\x2\x2\x2l\x13\x3\x2\x2\x2mn\a\b\x2\x2no\a\f\x2\x2op\x5 \x11\x2pq\a\r"+
		"\x2\x2q\x15\x3\x2\x2\x2rs\a\t\x2\x2st\a\f\x2\x2tu\x5 \x11\x2uv\a\r\x2"+
		"\x2v\x17\x3\x2\x2\x2wx\a\x5\x2\x2xy\a\x15\x2\x2yz\a\x15\x2\x2z}\a\f\x2"+
		"\x2{~\x5\x1A\xE\x2|~\x5 \x11\x2}{\x3\x2\x2\x2}|\x3\x2\x2\x2~\x7F\x3\x2"+
		"\x2\x2\x7F\x80\a\r\x2\x2\x80\x19\x3\x2\x2\x2\x81\x83\x5\x1C\xF\x2\x82"+
		"\x84\x5\x1E\x10\x2\x83\x82\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x8A\x3"+
		"\x2\x2\x2\x85\x87\x5\x1E\x10\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2"+
		"\x87\x88\x3\x2\x2\x2\x88\x8A\x5\x1C\xF\x2\x89\x81\x3\x2\x2\x2\x89\x86"+
		"\x3\x2\x2\x2\x8A\x1B\x3\x2\x2\x2\x8B\x8C\a\n\x2\x2\x8C\x8D\a\f\x2\x2\x8D"+
		"\x8E\x5 \x11\x2\x8E\x8F\a\r\x2\x2\x8F\x1D\x3\x2\x2\x2\x90\x91\a\b\x2\x2"+
		"\x91\x92\a\f\x2\x2\x92\x93\x5 \x11\x2\x93\x94\a\r\x2\x2\x94\x1F\x3\x2"+
		"\x2\x2\x95\x97\v\x2\x2\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98"+
		"\x99\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x99!\x3\x2\x2\x2\x9A\x98\x3\x2\x2"+
		"\x2\x15,\x33\x42GKMQT]`\x63\x66ik}\x83\x86\x89\x98";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Cdelta.Analyser.Generated
